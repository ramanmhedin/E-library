<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ResearchResource\Pages;
use App\Models\College;
use App\Models\Department;
use App\Models\File;
use App\Models\Research;
use App\Models\Subject;
use App\Models\User;
use Closure;
use Filament\Forms;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use PhpParser\Node\Expr\Array_;
use PHPUnit\Metadata\Group;
use function Laravel\Prompts\select;
use function PHPUnit\Framework\isEmpty;
use function PHPUnit\Framework\isNull;

class ResearchResource extends Resource
{
    protected static ?string $model = Research::class;

    protected static ?string $navigationIcon = 'heroicon-o-document-text';
    protected static ?string $navigationGroup = "Research";

    public static function canAccess(): bool
    {
        return auth()->user()->role->name == "Admin" || auth()->user()->role->name == "President"; // TODO: Change the autogenerated stub
    }

    public static function canDelete(Model $record): bool
    {
        return auth()->user()->role->name == "Admin"; // TODO: Change the autogenerated stub
    }
    public static function canCreate(): bool
    {
        return auth()->user()->role->name == "Admin"; // TODO: Change the autogenerated stub
    }

    public static function getEloquentQuery(): Builder
    {
        if (auth()->user()->role_id == 4) {
            return parent::getEloquentQuery()->with(["student", "teacher", "administer", "subject", "college", "files", "subject.department"])->where("college_id", auth()->user()->college_id);
        }
        return parent::getEloquentQuery()->with(["student", "teacher", "administer", "subject", "college", "files", "subject.department"]); // TODO: Change the autogenerated stub
    }


    public static function form(Form $form): Form
    {
        if (auth()->user()->role_id == 4 && $form->getOperation() == "edit") {
            return self::getPresidentForm($form);
        }
        return self::getAdminForm($form);

    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->sortable(),
                TextColumn::make('title')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('status')
                    ->alignCenter()
                    ->badge()
                    ->color(fn(string $state): string => match ($state) {
                        'progress' => 'info',
                        'under_review' => 'gray',
                        'under_evaluate' => 'warning',
                        'publish' => 'success',
                        'reject' => 'danger',
                    })
                    ->sortable(),
                TextColumn::make('marks')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('student.name')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('subject.name')
                    ->searchable()
                    ->sortable(),
                TextColumn::make('subject.department.name')
                    ->label("department")
                    ->searchable()
                    ->sortable(),
                TextColumn::make('college.name')
                    ->searchable()
                    ->sortable(),


            ])
            ->filters([

                Filter::make('filter')->form([
                    Select::make('college_id')
                        ->label("college")
                        ->hidden(fn() => auth()->user()->role_id == 4)
                        ->options(College::query()->pluck("name", "id"))
                        ->reactive(),

                    Select::make('department_id')
                        ->label("department")
                        ->options(function (Get $get) {
                            if (!empty($get("college_id"))) {
                                return Department::query()->where("college_id", $get("college_id"))->pluck("name", "id");
                            }
                            if (auth()->user()->role_id == 4) {
                                return Department::query()->where("college_id", auth()->user()->college_id)->pluck("name", "id");

                            }
                            return Department::query()->pluck("name", "id");
                        })
                ])->query(function (Builder $query, array $data): Builder {
                    return $query
                        ->when(
                            $data['college_id'],
                            fn(Builder $query, $date): Builder => $query->where('college_id', $date),
                        )
                        ->when(
                            $data['department_id'],
                            function (Builder $query, $departmentId) {
                                // This assumes there's a 'subject' relation on Research that links to a 'department'
                                return $query->whereHas('subject', function (Builder $q) use ($departmentId) {
                                    $q->where('department_id', $departmentId);
                                });
                            }
                        );

                })->indicateUsing(function (array $data) {
                    $indicators = [];

                    if (isset($data['college_id']) && $college = College::find($data['college_id'])) {
                        $indicators['College'] = $college->name;
                    }

                    if (isset($data['department_id']) && $department = Department::find($data['department_id'])) {
                        $indicators['Department'] = $department->name;
                    }

                    return $indicators;
                }),
            ])
            ->actions([
                ViewAction::make('view')
                    ->button(),

                EditAction::make('edit')
                    ->disabled(function (Research $record) {
                        if (auth()->user()->role_id == 4 && $record->status != "under_evaluate") {
                            return true;
                        }
                        return false;
                    })
                    ->label(function (Research $record) {
                        if (auth()->user()->role_id == 4) {
                            return "evaluate";
                        }
                        return "edit";
                    })
                    ->icon(function (Research $record) {
                        if (auth()->user()->role_id == 4) {
                            return "heroicon-o-document-check";
                        }
                        return "heroicon-s-pencil-square";
                    })
                    ->iconSize("lg")
                    ->button(),

                DeleteAction::make('delete')
                    ->button(),
                Tables\Actions\Action::make("files.download")
                    ->url(fn(Research $record) => route("files.download", $record))
                    ->button()
                    ->color("info")
                    ->disabled(fn(Research $record) => $record->status == "progress")
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->recordUrl(null);
    }


    public static function getRelations(): array
    {
        return [
            //
        ];
    }


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListResearch::route('/'),
            'create' => Pages\CreateResearch::route('/create'),
            'edit' => Pages\EditResearch::route('/{record}/edit'),
        ];
    }

    public static function getAdminForm($form): Form
    {
        return $form
            ->schema([

                Forms\Components\Group::make([
                    Forms\Components\Section::make("Research information")
                        ->schema([
                            TextInput::make("title")
                                ->string()
                                ->required(),
                            TextInput::make("description")
                                ->string()
                                ->required(),
                            TextInput::make("abstract")
                                ->string(),
                            FileUpload::make('research.files')
                                ->label('Research Documentation')
                                ->multiple()
                                ->preserveFilenames()
                                ->openable()
                                ->downloadable()
                                ->hiddenOn("view"),// Ensure you're specifying the correct disk

                        ])->columns(2),
                    Forms\Components\Section::make("Student")
                        ->schema([
                            Forms\Components\Select::make("college_id")
                                ->label("college")
                                ->options(College::all()->pluck("name", "id"))
                                ->reactive()
                                ->searchable()
                                ->required(),

                            Forms\Components\Select::make("subject_id")
                                ->label("subject")
                                ->options(fn(Get $get): Collection => Subject::query()
                                    ->when(isNull($get('college_id')), function ($query) use ($get) {
                                        return $query->where("college_id", $get('college_id'));
                                    })->pluck("name", "id")
                                )
                                ->reactive()
                                ->searchable()
                                ->required(),
                            Forms\Components\Select::make("student_id")
                                ->label("student")
                                ->options(fn(Get $get): Collection => User::query()
                                    ->where("role_id", "=", 2)
                                    ->when(isNull($get('subject_id')), function ($query) use ($get) {

                                        return $query->where("subject_id", $get('subject_id'));

                                    })->pluck("name", "id")
                                )
                                ->required(),

                            DateTimePicker::make("prepared_at")
                                ->string()
                                ->required(),
                        ])->columns(2),
                    Forms\Components\Section::make("Supervisor")
                        ->schema([

                            Forms\Components\Group::make([
                                Forms\Components\Select::make("teacher_id")
                                    ->label("teacher")
                                    ->options(fn(Get $get): Collection => User::query()
                                        ->where("role_id", "=", 3)
                                        ->when(isNull($get('subject_id')), function ($query) use ($get) {

                                            return $query->where("subject_id", $get('subject_id'));

                                        })->pluck("name", "id")
                                    )
                                    ->required(),
                                TextInput::make("marks")
                                    ->minValue(0)
                                    ->integer(),
                                TextInput::make("comments")
                                    ->string(),
                            ]),
                        ]),
                    Forms\Components\Section::make("Administrator")
                        ->schema
                        ([
                            Forms\Components\Select::make("administer_id")
                                ->label("President")
                                ->options(fn(Get $get): Collection => User::query()
                                    ->where("role_id", "=", 4)
                                    ->when(isNull($get('college_id')), function ($query) use ($get) {
                                        return $query
                                            ->where("college_id", $get('college_id'));
                                    })->pluck("name", "id")
                                )
                                ->required(),
                            DateTimePicker::make("administer_answered_at")
                                ->label("President_result")
                                ->string(),

                            Forms\Components\Group::make([
                                TextInput::make("plagiarism_percentage")
                                    ->integer()
                                    ->prefix(" % ")
                                    ->maxValue(100)
                                    ->minValue(0),
                                TextInput::make("impact_factor")
                                    ->label("impact factor")
                                    ->numeric()
                                    ->inputMode("decimal")
                                    ->step(0.1)
                                    ->maxValue(0.6)
                                    ->minValue(0.0),
                            ])->columns(2),

                            Forms\Components\Select::make("status")
                                ->options(["progress" => "progress", "under_review" => "under_review", "under_evaluate" => "under_evaluate", "publish" => "publish", "reject" => "reject"])
                                ->required()
                                ->native(),
                        ])->columns(2)

                ])->columnSpan(2),


            ])->columns(2);
    }

    public static function getPresidentForm($form): Form
    {
        return $form
            ->schema([

                Forms\Components\Group::make([
                    Forms\Components\Section::make("Administrator")
                        ->schema
                        ([
                            Forms\Components\Select::make("administer_id")
                                ->label("President")
                                ->options(fn(Get $get): Collection => User::query()
                                    ->where("role_id", "=", 4)
                                    ->when(isNull($get('college_id')), function ($query) use ($get) {
                                        return $query
                                            ->where("college_id", $get('college_id'));
                                    })->pluck("name", "id")
                                )
                                ->required(),
                            DateTimePicker::make("administer_answered_at")
                                ->label("President_result")
                                ->string(),

                            Forms\Components\Group::make([
                                TextInput::make("plagiarism_percentage")
                                    ->integer()
                                    ->prefix(" % ")
                                    ->maxValue(100)
                                    ->minValue(0),
                                TextInput::make("impact_factor")
                                    ->label("impact factor")
                                    ->numeric()
                                    ->inputMode("decimal")
                                    ->step(0.1)
                                    ->maxValue(0.6)
                                    ->minValue(0.0),
                            ])->columns(2),

                            Forms\Components\Select::make("status")
                                ->options(["progress" => "progress", "under_review" => "under_review", "under_evaluate" => "under_evaluate", "publish" => "publish", "reject" => "reject"])
                                ->required()
                                ->native(),
                        ])->columns(2)

                ])->columnSpan(2),


            ])->columns(2);
    }

}
